from selenium import webdriver
import requests
import random
from bs4 import BeautifulSoup
from time import sleep


# function for slow typing to work as a human
def slow_typing(element, str_):
    for i in str_:
        element.send_keys(i)
        sleep(0.2)


driver = webdriver.Chrome('/Users/mayank/Downloads/chromedriver')  # chromedriver object
sleep(3)
driver.get('https://www.bluebookofgunvalues.com/#/Login')  # redirect to Gunvalue login page
sleep(4)

email = driver.find_element_by_id("email")  # email obj
slow_typing(email, "guybreeden3@gmail.com")

password = driver.find_element_by_id("password")  # Password obj
slow_typing(password, "hoof24")

# driver.find_element_by_xpath("/html/body/my-app/div/div/div/relative-path/div/div[1]/form/div[3]/div/button")
driver.find_element_by_xpath(
    "/html/body/my-app/div/div/div/relative-path/div/div[1]/form/div[3]/div/button").click()  # click on login buttton
sleep(2)

print("Current URL :", driver.current_url)

try:
    driver.find_element_by_xpath(
        "/html/body/my-app/div/div/div/relative-path/existing-subscriptions/table/tbody/tr/td/table/tbody/tr/td[1]/a").click()
except Exception as err:
    print("Error :", err)

select_options = driver.find_element_by_xpath(
    "/html/body/my-app/div/div/div/relative-path/subscription-navigation/div/div/div[2]/nav/div/ul/li[7]/select")
select_options_li = select_options.find_elements_by_tag_name("option")
print("select_options_li :", len(select_options_li))
del select_options_li[0]
alphabets = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
             'V', 'W', 'X', 'Y', 'Z']

for i in alphabets:
    driver.get("https://www.bluebookofgunvalues.com/#/Manufacturer_List/Gun/" + i + "")
    sleep(4)

    all_links = driver.find_element_by_xpath("/html/body/my-app/div/div/div/relative-path/div/div[1]")
    all_links = all_links.get_attribute("innerHTML")
    links = BeautifulSoup(all_links, 'html.parser')
    links = links.find_all('a')
    print(links)
    for link in links:

        # link = BeautifulSoup(link.getAttribute("innerHTML"),'html.parser')
        driver.get("https://www.bluebookofgunvalues.com/" + str(link.get('href')))
        sleep(4)
        try:
            driver.find_element_by_xpath(
                "/html/body/my-app/div/div/div/relative-path/div/div/div[3]/div[1]/div[1]/a").click()
            current_url = driver.current_url
            sleep(5)
            page_source = driver.page_source
            html_str = BeautifulSoup(page_source, 'html.parser')

            divs = html_str.find_all("div", attrs={"class": "custom-container Model"})
            for div in divs:
                all_divs = div.find_all("div")

                try:
                    title = all_divs[0].text
                    title = title.split("Add")
                    title = title[0]
                except:
                    title = ""

                try:
                    description = all_divs[1].text
                except:
                    description = ""

                grading_li = []
                try:
                    grading = div.find("table")
                    th = grading.find_all("th")
                    td = grading.find_all("td")

                    for i, k in zip(th, td):
                        print(i.text, k.text)
                        if i.text == "Grading":
                            pass
                        else:
                            grading_li.append({"grading": i.text, "score": k.text})

                except Exception as h:

                    print("Exception is ", h)
                    grading_li = []
                    pass

                try:
                    price_info = all_divs[-2].text
                except:
                    price_info = ""
                    pass

                final_dict = {"Title": title, "Description": description, "Grading": grading_li,
                              "Price Info": price_info}
            sleep(11)
        except Exception as k:
            print(k)
            try:
                driver.find_element_by_xpath(
                    "/html/body/my-app/div/div/div/relative-path/div/div/div[2]/div[1]/div[1]/a").click()
                print(driver.current_url)
                sleep(5)
                page_source = driver.page_source
                html_str = BeautifulSoup(page_source, 'html.parser')

                divs = html_str.find_all("div", attrs={"class": "custom-container Model"})
                for div in divs:
                    all_divs = div.find_all("div")
                    # print('8888',all_divs[0].text)

                    try:
                        title = all_divs[0].text
                        title = title.split("Add")
                        title = title[0]
                    except:
                        title = ""
                    try:
                        description = all_divs[1].text
                    except:
                        description = ""

                    try:
                        grading = div.find("table")
                        th = grading.find_all("th")
                        td = grading.find_all("td")
                        grading_li = []
                        for i, k in zip(th, td):
                            print(i.text, k.text)
                            if i.text == "Grading":
                                pass
                            else:
                                grading_li.append({"grading": i.text, "score": k.text})
                    except Exception as h:
                        print("Exception is ", h)
                        pass

                    try:
                        price_info = all_divs[-2].text
                    except:
                        pass

                    final_dict = {"Title": title, "Description": description, "Grading": grading_li,
                                  "Price Info": price_info}
                sleep(11)
            except Exception as Bug:
                print("--", Bug)
                pass

driver.quit()
